#!/usr/bin/env node

/**
 * Module dependencies.
 */
const config = require('config');
const mongodb = require('mongodb');
const app = require('../app');
const debug = require('debug')('express-app:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */
app.set('port', config.get('app.port'));

/**
 * Create HTTP server.
 */
debug('Building server on port '+config.get('app.port'));
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
debug('Connecting to mongo...')
mongodb.MongoClient.connect(config.get('db.url'))
  .then((db) => {
    debug('Connected to mongo on: '+config.get('db.url'))
    app.set('db', db);
    server.listen(config.get('app.port'));
    server.on('error', onError);
    server.on('listening', onListening);
  })
  .catch((error) => {
    console.log(JSON.stringify(error, null, 2));
    process.exit(1);
  });

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
